#!/usr/bin/env th
local lapp = require 'pl.lapp'
local dir = require 'pl.dir'
local path = require 'pl.path'
require 'dokx'

local function processArgs()
    return lapp [[
Check out a list of projects from git, and build docs for them in a central tree
    -o,--output (string)                path to root of documentation tree
    -r,--repl   (optional string)       path to install markdown for REPL
    -b,--branch (default master)        branch to check out
    -d,--description (optional string)  package description
    -s,--section (optional string)      package section
    <inputs...> (string)                git URL(s) (e.g. git@github.com:d11/torch-dokx.git)
    --debug                             debug mode
]]
end

local function main(args)

    if args.debug then
        dokx.debugMode()
    end

    local tempDir = dokx._mkTemp()

    for _, input in ipairs(args.inputs) do
        local gitURL = input
        local name = path.basename(gitURL):gsub("%.git$","")
        local cloneDir = path.join(tempDir, name)
        dir.makepath(cloneDir)
        local gitCmd = "git clone " .. gitURL .. " " .. cloneDir
        local result = os.execute(gitCmd)
        lapp:assert(result, "Git checkout of " .. input .. " failed.")

        if args.branch then
            os.execute("cd " .. cloneDir .. " && git checkout " .. args.branch)
        end

        dokx.buildPackageDocs(args.output, cloneDir, args.repl, args.description, args.section)
    end

    dir.rmtree(tempDir)
end

main(processArgs())
