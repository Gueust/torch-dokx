#!/usr/bin/env th
local lapp = require 'pl.lapp'
local path = require 'pl.path'

dofile("luasrc/parse.lua") -- TODO require
dofile("luasrc/markdown.lua")-- TODO require

-- TODO debug mode
require 'logging.console'
local logger = logging.console()
logger:setLevel(logging.DEBUG)

local function processArgs()
    return  lapp [[
Extract inline documentation from Lua source
    -p,--package (string)    package name
    -o,--output (string)    output directory
    <inputs...>  (string)   input .lua files
    ]]
end


local function main(args)
    if not path.isdir(args.output) then
        logger:info("Directory " .. args.output .. " not found; creating it.")
        path.mkdir(args.output)
    end

    for i, input in ipairs(args.inputs) do
        logger:info("Processing file " .. input)

        local basename = path.basename(input)
        local packageName, ext = path.splitext(basename)
        lapp.assert(ext == '.lua', "Expected .lua file for input")
        local outputPath = path.join(args.output, packageName .. ".html")

        local documentedFunctions, undocumentedFunctions = dokx.extractDocs(args.package, input)

        -- Output markdown
        local output = ""
        if documentedFunctions:len() ~= 0 then
            output = output .. "<ul>\n"
            local function handleDocumentedFunction(entity)
                anchorName = entity:name()
                output = output .. [[<li><a href="#]] .. anchorName .. [[">]] .. entity:name() .. [[</a></li>]] .. "\n"
            end
            documentedFunctions:foreach(handleDocumentedFunction)
            output = output .. "</ul>\n"
        end

        local outputFile = io.open(outputPath, 'w')
        outputFile:write(output)
        outputFile:close()
    end
end

main(processArgs())

